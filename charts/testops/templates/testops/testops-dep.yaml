---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "allure-testops.fullname" . }}
  labels:
    app: {{ template "allure-testops.fullname" . }}
    version: v1
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
{{ toYaml .Values.strategy | indent 4 }}
  selector:
    matchLabels:
      app: {{ template "allure-testops.fullname" . }}
      version: v1
  template:
    metadata:
      labels:
        app: {{ template "allure-testops.fullname" . }}
        version: v1
{{- if .Values.annotations.deployment }}
      annotations:
{{- range $key, $value := .Values.annotations.deployment }}
        {{ $key }}: {{ $value | quote }}
{{- end }}
{{- end }}
    spec:
{{- if .Values.rbac.enabled }}
      serviceAccountName:  {{ template "allure-testops.name" . }}-sa
{{- end }}
      imagePullSecrets:
        - name: {{ .Values.image.authRequired.credsKubeSecretName }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
      initContainers:
        - name: db-readiness-check
          image: {{ .Values.databaseInit.image | quote }}
{{- with .Values.databaseInit.resources }}
          resources:
{{ toYaml . | indent 12 }}
{{- end }}
          command: [ 'sh', '-c',
            'until pg_isready -h {{ template "mainDBHost" . }} -p {{ template "mainDBPort" . }};
             do echo waiting for database; sleep 2; done;' ]
      containers:
{{- $secret_name := include "allure-testops.secret.name" . }}
        - name: {{ template "allure-testops.fullname" . }}
          image: "{{ template "getImageRegistry" . }}:{{ .Values.version | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
{{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.port }}
          env:
{{- include "renderCommonEnvs" . | indent 10 }}
{{- include "renderCryptoEnvs" . | indent 10 }}
{{- include "renderDataBaseEnvs" . | indent 10 }}
{{- include "renderRabbitMQEnvs" . | indent 10 }}
{{- include "renderRedisEnvs" . | indent 10 }}

{{- if .Values.auth.ldap.enabled }}
{{- include "renderLDAPEnvs" . | indent 10 }}
{{- end }}

{{- if .Values.auth.saml.enabled }}
{{- include "renderSAMLEnvs" . | indent 10 }}
{{- end }}

{{- if eq .Values.storage.type "S3" }}
{{- include "renderS3Envs" . | indent 10 }}
{{- end }}

{{- if eq .Values.storage.type "CSI" }}
{{- include "renderFSEnvs" . | indent 10 }}
{{- end }}

{{- if .Values.smtp.enabled }}
{{- include "renderSMTPEnvs" . | indent 10 }}
{{- end }}

{{- if .Values.widgetsCache.enabled }}
{{- include "renderWidgetsCache" . | indent 10 }}
{{- end }}

{{- range $name, $value := .Values.env.open }}
            - name: {{ $name | quote }}
              value: {{ $value | quote }}
{{- end }}
{{- if .Values.probes.enabled }}
          livenessProbe:
            httpGet:
              path: /api/management/health
              port: http
{{ toYaml .Values.probes.liveness.probe | indent 12 }}
          readinessProbe:
            httpGet:
              path: /api/management/health
              port: http
{{ toYaml .Values.probes.readiness.probe | indent 12 }}
{{- end }}
{{- with .Values.resources }}
          resources:
{{ toYaml . | indent 12 }}
{{- end }}
{{- if or (eq .Values.storage.type "CSI") (.Values.vault.enabled) }}
          volumeMounts:
{{- if eq .Values.storage.type "CSI" }}
            - mountPath: {{ .Values.storage.csi.mountPoint }}
              name: storage
{{- end }}
{{- if .Values.vault.enabled }}
            - name: vault-creds
              mountPath: "{{ .Values.vault.mountPath }}"
              readOnly: true
{{- end }}
      volumes:
{{- if eq .Values.storage.type "CSI" }}
        - name: storage
          persistentVolumeClaim:
            claimName: {{ template "allure-testops.fullname" . }}
{{- end }}
{{- if .Values.vault.enabled }}
        - name: vault-creds
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ template "allure-testops.fullname" . }}
{{- end }}
{{- end }}